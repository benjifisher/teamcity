---
- hosts: all

  vars_files:
  - vars/main.yml

  pre_tasks:
    - name: Ensure that the host name is set.
      hostname: name={{ hostname }}

    - name: Ensure that there is a user to control the app.
      user: >
        name={{ app_user }}
        state=present
        system={{ app_is_system_user }}

  roles:
    - geerlingguy.mysql

  tasks:

    - name: Ensure that Java is installed.
      unarchive: >
        src=../src/{{ java_tarball }}
        dest=/home/{{ app_user }}
        creates={{ java_path }}

    # I tried adding user: and group: to the task above, and it did not work. :-(
    - name: Fix directory permissions for java.
      file: >
        path={{ java_path }}
        owner={{ app_user }}
        group={{ app_user }}
        state=directory
        recurse=yes

    - name: Ensure that the application is installed.
      unarchive: >
        src=../src/{{ app_tarball }}
        dest=/home/{{ app_user }}
        owner={{ app_user }}
        group={{ app_user }}
        creates={{ app_path }}

    - name: Fix directory permissions for the application.
      file: >
        path=/home/{{ app_user }}/{{ app_expanded }}
        owner={{ app_user }}
        group={{ app_user }}
        state=directory
        recurse=yes

    - name: Ensure that the directory for the database connector exists.
      file: >
        path={{ db_connector_path }}
        owner={{ app_user }}
        group={{ app_user }}
        state=directory
        recurse=yes

    - name: Check whether the database connector already exists.
      stat: path={{ db_connector_path }}/{{ db_connector_jar }} get_md5=no
      register: jar_link

    - name: Ensure that the database connector is available.
      unarchive: >
        src=../src/{{ db_connector_tarball }}
        dest={{ db_connector_path }}
        owner={{ app_user }}
        group={{ app_user }}
        creates={{ db_connector_path }}/{{ db_connector_expanded }}
      when: not jar_link.stat.exists

    - name: Ensure that there is a link to the database connector .jar file.
      file: >
        src={{ db_connector_path }}/{{ db_connector_expanded }}/{{ db_connector_jar }}
        dest={{ db_connector_path }}/{{ db_connector_jar }}
        state=hard
      when: not jar_link.stat.exists

    - name: Check whether the service script already exists.
      stat: path=/etc/init.d/teamcity get_md5=no
      register: init_script

    - name: Ensure that service is configured to control the application.
      template: >
        src=templates/service.sh.j2
        dest=/etc/init.d/teamcity
        owner=root
        group=root
        mode=0755
      when: not init_script.stat.exists

    - name: Ensure the application is started and enabled on boot.
      service: name=teamcity state=started enabled=yes

    # I do not know why the previous step did not work. :-(
    - name: Manually start the service.
      command: service teamcity start
